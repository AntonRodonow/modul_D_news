"""
Django settings for news_project project.

Generated by 'django-admin startproject' using Django 4.2.10.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path
from dotenv import load_dotenv

load_dotenv()


dotenv_path = Path(".local.env")
load_dotenv(dotenv_path=dotenv_path)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1', 'localhost', 'localhost:<port_number>', ]  # '127.0.0.1', 'localhost' - было пусто. Нужно для гугл-авторизации;


# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',  # Провека уровня доступа авторизованного пользователя на какое-либо действие, дает класс User, необходим для регистрации по др. аккаунтов
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',  # Необходим также для рег по др. аккаунтов
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.flatpages',

    # Нужны для рег по др. аккаунтам:
    'allauth',  # установка совместно pip install django-allauth
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.yandex',
    'allauth.socialaccount.providers.google',  # Не функционирует, т.к. нужен сертификат ssl для https


    # мои приложения:
    # 'appnews', # когда дополняем функционал apps делаем обявление приложения, как в строке ниже, как класс в apps:
    'appnews.apps.AppnewsConfig',  # например для отправки писем, если в это app что-то добавлял
    'accounts',
    'mail',

    # загруженные устанавливаемые пакеты:
    'django_filters',
    'django_apscheduler',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',
    "allauth.account.middleware.AccountMiddleware",  # нужен для рег через сторонние сервисы (напр. яндекс, гугл)
]

SITE_ID = 1  # дает запрос на сопоставление сайтов (список возможных сайтов), помимо прочего, при ошибках,
# отсутствыие SITE_ID не вызовет сбой в работе сайта, но нужен для работы некоторых сторонних библиотек

SITE_URL = 'http://127.0.0.1:8000'

ROOT_URLCONF = 'news_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],  # os.path.join(BASE_DIR, 'templates')
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


# Для регистрации с др. ресурсов AUTHENTICATION_BACKENDS (гугл, яндекс аккаунтов):
AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',
    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Для регистрации нового пользователя на сайте (эти переменные входят в прилоение-библиотеку allauth):
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'  # код работает и без этой строки
ACCOUNT_EMAIL_VERIFICATION = 'optional'   # Подтверждение на почту отправлено (подтверждать не обязательно для доступа к сайту). 'Mandatory' - доступ только после подтверждения с почты
# аккаунта, после подтверждения которого восстанавливается полная функциональность учётной записи "none"(без подтвержд)
ACCOUNT_FORMS = {'signup': 'account.models.BaseRegisterForm'}  # форма регистрации и отправки почты работает и без этой строки кода
ACCOUNT_CONFIRM_EMAIL_ON_GET = True  # автоактивация аккаунта после регистрации на сайте сразу, как только мы перейдём по ссылке
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 1  # хранит количество дней, когда доступна ссылка на подтверждение регистрации

WSGI_APPLICATION = 'news_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Moscow'  # 'UTC' - в базе данных, абсолюное время (нулевой пояс), а TIME_ZONE = 'Europe/Moscow' показывает относительное время (Московское)

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'  # запись жизненно необходима для работоспособности сайта

STATICFILES_DIRS = [
    BASE_DIR / "static"
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'  # переопределение по умолчанию праймори ки во всем проекте


# пути перенаправления:
LOGIN_REDIRECT_URL = '/appnews/'  # замещение пути из коробки account/profile
# LOGOUT_REDIRECT_URL = '/appnews/'  # Происодит замещение template_name='accounts/logout.html'-ом указанномв урле прил.


# настройка почты с которой будет рассылка писем подписчикам:
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # для тестирования в консоль
EMAIL_HOST = 'smtp.yandex.ru'
EMAIL_PORT = 465
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")
EMAIL_USE_TLS = False  # Прописывать это не надо, т.к. False по умолчанию, но помнить стоит
EMAIL_USE_SSL = True
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

EMAIL_SUBJECT_PREFIX = None  # по умолчанию [Django], с ней в теме и приходят письма


# настройка для отправки менеджерам и админам компании (из коробки Джанго):
SERVER_EMAIL = os.getenv("SERVER_EMAIL")

# Пришлось вывести сюда, т.к. из .env - не работает рассылка аюминам и менеджерам, скоррее всего идет проверка на список двойных кортежей на уровне settings.py, а не .env, т.к. в ошибке все списки верны
MANAGERS = (('Email1', 'email1@gmail.com'), ('anton812.bot', 'anton812.bot@yandex.ru'),)
ADMINS = (('admin', 'antonbot812@gmail.com'),)


# формат даты для периодических задач datetime.datetime:
APSCHEDULER_DATETIME_FORMAT = "N j, Y, f:s a"
# если задача не выполняется за 25 секунд, то она автоматически снимается, можете поставить время побольше, но как правило, это сильно бьёт по производительности сервера
APSCHEDULER_RUN_NOW_TIMEOUT = 25  # Seconds

# Celery, Redis.   # Включен удаленный редис, а локальный закоментирован (redis://логин:пароль@endpoint:port), что значит логин, хз, т.к. есть fist name, last name, а логина нет
CELERY_BROKER_URL = 'redis://127.0.0.1:6379'  # указывает на URL брокера сообщений
CELERY_RESULT_BACKEND = 'redis://127.0.0.1:6379'  # указывает на хранилище результатов выполнения задач
CELERY_ACCEPT_CONTENT = ['application/json']  # допустимый формат данных
CELERY_TASK_SERIALIZER = 'json'  # метод сериализации задач
CELERY_RESULT_SERIALIZER = 'json'  # метод сериализации результатов
# CELERY_RESULT_BACKEND = 'redis://antonrodionov:TRyV9f6gcAbGJFAu2iXRTCX87E4YZ6WW@redis-11304.c292.ap-southeast-1-1.ec2.cloud.redislabs.com:11304'
# CELERY_BROKER_URL = 'redis://antonrodionov:TRyV9f6gcAbGJFAu2iXRTCX87E4YZ6WW@redis-11304.c292.ap-southeast-1-1.ec2.cloud.redislabs.com:11304'
